load_file("nrngui.hoc")

objref nclist_us, nclist_spon, nclist_cs
objref  us, cs, sponFire
objref random

proc makeMoveStim() { local i, j, cls, timing, stim_num, stim_int, stim_start, stim_interval localobj nc_tmp, cs_tmp, cs_list, nclist_sub
    cs_list=$o1
    nclist_sub=$o2
    cls=$3
    timing=$4
    stim_num=$5
    stim_int=$6
    num_ecell_input=$7
    
    stim_start = 20
    stim_interval=stim_num*stim_int
    
    
    
    //move horizontally                                                                                                                    
    if(cls==0){
        for i=0, num_ecell_input-1 {
            if(stimuli[0].x[i]){
                for(j=-4;j<=4;j+=1){
                    if(pc.gid_exists(i+j)){
                        pc.gid2cell(i+j).soma {
                            cs_tmp = new NetStim()
                            cs_tmp.start = stim_start+stim_interval*(j+4)+timing*(stim_num*stim_int*9+200)
                            cs_tmp.number = stim_num
                            cs_tmp.interval = stim_int
                            cs_tmp.noise = 0
                            cs_list.append(cs_tmp)
                            nc_tmp = new NetCon(cs_tmp,pc.gid2cell(i+j).synlist.object(0),0,0.1,0.05)
                            nclist_sub.append(nc_tmp)
                        }
                    }
                }
            }
        }
    }
    
    if(cls==1){
        for i=0, num_ecell_input-1 {
            if(stimuli[0].x[i]){
                for(j=-4;j<=4;j+=1){
                    if(pc.gid_exists(i-j)){
                        pc.gid2cell(i-j).soma {
                            cs_tmp = new NetStim()
                            cs_tmp.start = stim_start+stim_interval*(j+4)+timing*(stim_num*stim_int*9+200)
                            cs_tmp.number = stim_num
                            cs_tmp.interval = stim_int
                            cs_tmp.noise = 0
                            cs_list.append(cs_tmp)
                            nc_tmp = new NetCon(cs_tmp,pc.gid2cell(i-j).synlist.object(0),0,0.1,0.05)
                            nclist_sub.append(nc_tmp)
                        }
                    }
		}
            }
        }
    }
    
    if(cls==2){
        //move vertically                                                                                                                  
        for i=0, num_ecell_input-1 {
            if(stimuli[0].x[i]){
                for(j=-4;j<=4;j+=1){
                    if(pc.gid_exists(i+16*j)){
                        pc.gid2cell(i+16*j).soma {
                            cs_tmp = new NetStim()
                            cs_tmp.start = stim_start+stim_interval*(j+4)+timing*(stim_num*stim_int*9+200)
                            cs_tmp.number = stim_num
                            cs_tmp.interval = stim_int
                            cs_tmp.noise = 0
                            cs_list.append(cs_tmp)
                            nc_tmp = new NetCon(cs_tmp,pc.gid2cell(i+16*j).synlist.object(0),0,0.1,0.05)
                            nclist_sub.append(nc_tmp)
                        }
                    }
                }
            }
        }
    }
    
    if(cls==3){
        for i=0, num_ecell_input-1 {
            if(stimuli[0].x[i]){
                for(j=-4;j<=4;j+=1){
                    if(pc.gid_exists(i-16*j)){
                        pc.gid2cell(i-16*j).soma {
                            cs_tmp = new NetStim()
                            cs_tmp.start = stim_start+stim_interval*(j+4)+timing*(stim_num*stim_int*9+200)
                            cs_tmp.number = stim_num
                            cs_tmp.interval = stim_int
                            cs_tmp.noise = 0
                            cs_list.append(cs_tmp)
                            nc_tmp = new NetCon(cs_tmp,pc.gid2cell(i-16*j).synlist.object(0),0,0.1,0.05)
                            nclist_sub.append(nc_tmp)
                        }
                    }
                }
            }
        }
    }
}


proc makeMoveStim_StimuliSelectable() { local i, j, cls, timing, stim_num, stim_int, stim_start, stim_interval localobj nc_tmp, cs_tmp, cs_list, nclist_sub
    cs_list=$o1
    nclist_sub=$o2
    cls=$3
    timing=$4
    stim_num=$5
    stim_int=$6
    num_ecell_input=$7
    type_of_stim=$8
    
    stim_start = 20
    stim_interval=stim_num*stim_int
    
    
    
    //move horizontally                                                                                                                    
    if(cls==0){
        for i=0, num_ecell_input-1 {
            if(stimuli[type_of_stim].x[i]){
                for(j=-4;j<=4;j+=1){
                    if(pc.gid_exists(i+j)){
                        pc.gid2cell(i+j).soma {
                            cs_tmp = new NetStim()
                            cs_tmp.start = stim_start+stim_interval*(j+4)+timing*(stim_num*stim_int*9+200)
                            cs_tmp.number = stim_num
                            cs_tmp.interval = stim_int
                            cs_tmp.noise = 0
                            cs_list.append(cs_tmp)
                            nc_tmp = new NetCon(cs_tmp,pc.gid2cell(i+j).synlist.object(0),0,0.1,0.05)
                            nclist_sub.append(nc_tmp)
                        }
                    }
                }
            }
        }
    }
    
    if(cls==1){
        for i=0, num_ecell_input-1 {
            if(stimuli[type_of_stim].x[i]){
                for(j=-4;j<=4;j+=1){
                    if(pc.gid_exists(i-j)){
                        pc.gid2cell(i-j).soma {
                            cs_tmp = new NetStim()
                            cs_tmp.start = stim_start+stim_interval*(j+4)+timing*(stim_num*stim_int*9+200)
                            cs_tmp.number = stim_num
                            cs_tmp.interval = stim_int
                            cs_tmp.noise = 0
                            cs_list.append(cs_tmp)
                            nc_tmp = new NetCon(cs_tmp,pc.gid2cell(i-j).synlist.object(0),0,0.1,0.05)
                            nclist_sub.append(nc_tmp)
                        }
                    }
		}
            }
        }
    }
    
    if(cls==2){
        //move vertically                                                                                                                  
        for i=0, num_ecell_input-1 {
            if(stimuli[type_of_stim].x[i]){
                for(j=-4;j<=4;j+=1){
                    if(pc.gid_exists(i+16*j)){
                        pc.gid2cell(i+16*j).soma {
                            cs_tmp = new NetStim()
                            cs_tmp.start = stim_start+stim_interval*(j+4)+timing*(stim_num*stim_int*9+200)
                            cs_tmp.number = stim_num
                            cs_tmp.interval = stim_int
                            cs_tmp.noise = 0
                            cs_list.append(cs_tmp)
                            nc_tmp = new NetCon(cs_tmp,pc.gid2cell(i+16*j).synlist.object(0),0,0.1,0.05)
                            nclist_sub.append(nc_tmp)
                        }
                    }
                }
            }
        }
    }
    
    if(cls==3){
        for i=0, num_ecell_input-1 {
            if(stimuli[type_of_stim].x[i]){
                for(j=-4;j<=4;j+=1){
                    if(pc.gid_exists(i-16*j)){
                        pc.gid2cell(i-16*j).soma {
                            cs_tmp = new NetStim()
                            cs_tmp.start = stim_start+stim_interval*(j+4)+timing*(stim_num*stim_int*9+200)
                            cs_tmp.number = stim_num
                            cs_tmp.interval = stim_int
                            cs_tmp.noise = 0
                            cs_list.append(cs_tmp)
                            nc_tmp = new NetCon(cs_tmp,pc.gid2cell(i-16*j).synlist.object(0),0,0.1,0.05)
                            nclist_sub.append(nc_tmp)
                        }
                    }
                }
            }
        }
    }
}


//ins setStim section, it is remained to describe that what cells is potentiated by DA. So, let's add in next case.
proc setStim(){local i, j, stim_num, num_vta, dur, num_cs, stim_int, num_ecell_input, l_times, stim_dur, stim_start, stim_set_interval, stim_interval, cls, rnd localobj nc, us_tmp, cs_tmp, spon_tmp
    stim_num = $1 //stim_dur = $1
    num_vta = $2
    dur = $3
    num_cs = $4
    stim_int = $5
    num_ecell_input = $6
    l_times = $7
    stim_start = $8
    num_cell_full = $9
    
    stim_dur = stimInt*stimNum//900//1900//2000// karigime
    stim_set_interval = (stim_dur + 100) * 5
    stim_interval = stim_dur + 100//1000
    
    nclist_us = new List()
    us = new List()
    
    //for cls=0, dir_num*l_times-1{
    for cls=0, stim_order_move.size-1{
	for(i=0;i<100;i+=1){
	    if((i>=20*stim_order_move.x(cls) && i<20*(stim_order_move.x(cls)+1)) || (i>=80+5*stim_order_move.x(cls) && i<85+5*stim_order_move.x(cls))){
		if(pc.gid_exists(i+912)){
		    pc.gid2cell(i+912).soma {
			us_tmp = new NetStim()
			us_tmp.start = stim_start+5+STIM_DUR_MOVE*cls
			//if(cls<LT4INPUT){
                        us_tmp.interval = stim_int
			//}else{
			//   us_tmp.interval = 20
			//}
			us_tmp.number = int(STIM_DUR_MOVE/stim_int)
			us_tmp.noise = 0.05
			us.append(us_tmp)
			nc = new NetCon(us_tmp,pc.gid2cell(i+912).synlist.o(1),0,0.1,0.05)
			nclist_us.append(nc)
		    }
		}
	    }
	}
    }
	
    
    nclist_cs = new List()
    cs = new List()
    
    r = new Random(25525)
    rnd = r.discunif(0,4)
    
    for cls=0, stim_order_move.size-1 {
	makeMoveStim(cs,nclist_cs,stim_order_move.x(cls),cls,8,25,num_ecell_input)
	//makeMoveStim_StimuliSelectable(cs,nclist_cs,stim_order_move.x(cls),cls,8,25,num_ecell_input,r.repick())
    }
    /*
    for cls=0, data_num*l_times-1{
	for i=0, num_ecell_input-1 {
	    
	    //the definition for "ka" "ki" "ku" "ke" "ko"
	    if(stimuli[stim_order.x(cls)].x[i]){
		if(pc.gid_exists(i)){
		    pc.gid2cell(i).soma {
			//for j=0, l_times-1 {
			cs_tmp = new NetStim()
			cs_tmp.start = stim_start+stim_interval*cls//+stim_set_interval*j
			cs_tmp.number = stim_num//*5
			cs_tmp.interval = stim_int
			cs_tmp.noise = 0//0.05
			cs.append(cs_tmp)
			nc = new NetCon(cs_tmp,pc.gid2cell(i).synlist.object(0),0,0.1,0.05)
			nclist_cs.append(nc)
			
			
			//}
		    }
		}
	    }
	}
    }
    */
    /*
    for cls=0, 4 {
	for i=0, num_ecell_input-1 {
	    if(stimuli[cls].x[i]){
		if(pc.gid_exists(i)){
		    pc.gid2cell(i).soma {
			cs_tmp = new NetStim()
			cs_tmp.start = startTest+cls*500
			cs_tmp.interval = stim_int
			cs_tmp.number = 25
			cs_tmp.noise = 0
			cs.append(cs_tmp)
			nc = new NetCon(cs_tmp,pc.gid2cell(i).synlist.object(0),0,0.1,0.05)
			nclist_cs.append(nc)
		    }
		}
	    }
	}
    }
    */
    
    //for test section
    //move horizontally for test                                                                                                           
    for i=0, num_ecell_input-1 {                                                                                                  
        if(stimuli[0].x[i]){                                                                                                      
            for(j=-4;j<=4;j+=1){                                                                                                  
                if(pc.gid_exists(i+j)){                                                                                           
                    pc.gid2cell(i+j).soma {                                                                                       
                        cs_tmp = new NetStim()
                        cs_tmp.start = startMoveTest+stim_int*8*(j+4)                                                             
                        cs_tmp.number = 8                                                                                  
                        cs_tmp.interval = stim_int                                                                                
                        cs_tmp.noise = 0                                                                                          
                        cs.append(cs_tmp)                                                                                         
                        nc = new NetCon(cs_tmp,pc.gid2cell(i+j).synlist.object(0),0,0.1,0.05)                                     
                        nclist_cs.append(nc)                                                                                      
                    }                                                                                                             
                }                                                                                                                 
            }                                                                                                                     
        }                                                                                                                         
    }
    
    for i=0, num_ecell_input-1 {                                                                                                  
        if(stimuli[0].x[i]){                                                                                                      
            for(j=-4;j<=4;j+=1){                                                                                                  
                if(pc.gid_exists(i-j)){                                                                                         
                    pc.gid2cell(i-j).soma {                                                                                     
                        cs_tmp = new NetStim()
                        cs_tmp.start = startMoveTest+stim_int*8*(j+4)+9*(stim_int*8)+200
                        cs_tmp.number = 8                                                
                        cs_tmp.interval = stim_int                                                                                
                        cs_tmp.noise = 0                                                                                          
                        cs.append(cs_tmp)                                                                                         
                        nc = new NetCon(cs_tmp,pc.gid2cell(i-j).synlist.object(0),0,0.1,0.05)                                   
                        nclist_cs.append(nc)                                                                                      
                    }                                                                                                             
                }                                                                                                                 
            }                                                                                                                     
        }                                                                                                                         
    }
    
    
    //move vertically                                                                                                             
    for i=0, num_ecell_input-1 {
        if(stimuli[0].x[i]){
            for(j=-4;j<=4;j+=1){
                if(pc.gid_exists(i+16*j)){
                    pc.gid2cell(i+16*j).soma {
                        cs_tmp = new NetStim()
			cs_tmp.start = startMoveTest+stim_int*8*(j+4)+18*(stim_int*8)+400
                        cs_tmp.number = 8
                        cs_tmp.interval = stim_int
                        cs_tmp.noise = 0
                        cs.append(cs_tmp)
                        nc = new NetCon(cs_tmp,pc.gid2cell(i+16*j).synlist.object(0),0,0.1,0.05)
                        nclist_cs.append(nc)
                    }
                }
            }
        }
    }
    
    for i=0, num_ecell_input-1 {
        if(stimuli[0].x[i]){
            for(j=-4;j<=4;j+=1){
                if(pc.gid_exists(i-16*j)){                                                                                      
		    pc.gid2cell(i-16*j).soma {
                        cs_tmp = new NetStim()
			cs_tmp.start = startMoveTest+stim_int*8*(j+4)+27*(stim_int*8)+600
                        cs_tmp.number = 8
                        cs_tmp.interval = stim_int
                        cs_tmp.noise = 0
                        cs.append(cs_tmp)
                        nc = new NetCon(cs_tmp,pc.gid2cell(i-16*j).synlist.object(0),0,0.1,0.05)                                
                        nclist_cs.append(nc)
                    }
                }
            }
        }
    }
    
    //end for test section

	
	
	
    
    nclist_spon = new List()
    sponFire = new List()
    
    //for i=0, cells.count-1 {
    //	cells.object(i).soma {
    for i=0, num_cell_full-1 {
	if(i<256 || i>=512){
	    if(pc.gid_exists(i)){
		pc.gid2cell(i).soma{
		    spon_tmp = new GammaNoise(0.85)
		    spon_tmp.amp = 0.065
		    spon_tmp.dur = startMoveTest//dur
		    spon_tmp.del = 20
		    spon_tmp.forseed = i
		    /*
		    }else if((i>=512 && i<832) || (i>=912 && i<992)){
			spon_tmp.KAPPA = 0.23//0.17
		    }*/
		    //ikkai comment out siteru noha warito umaku itta mono
		    
		    if((i>=832 && i<912) && (i>=992 && i<1012)){
			spon_tmp.KAPPA = OUT1_SPON_I_K//0.15//0.1//0.15//0.13//learn30.28//0.14//kokogatest26desu0.23//0.28//0.18//0.14//0.13
			spon_tmp.THETA = OUT1_SPON_I_T//0.25//0.3//0.25//learn30.32//0.25//<-for learn2 for learn1->//0.3//0.32//0.31//0.3//0.3//0.28
			
		    }else if(i>=512 && i<832){
			spon_tmp.KAPPA = OUT1_SPON_E_K//0.12//0.09//0.35//0.24//0.2//0.13//0.26//0.23//<-korede choujikan test//0.17//0.22//learn4detuyosugita0.45//0.29//0.6//0.45//0.34//0.29//6
			spon_tmp.THETA = OUT1_SPON_E_T
		    }else if(i>=912 && i<992){
			spon_tmp.KAPPA = OUT2_SPON_E_K//0.15//0.18//learn4detuyosugita0.38//0.23//0.52//0.38//0.28//0.23//23
			spon_tmp.THETA = OUT2_SPON_E_T
		    }else{
			spon_tmp.KAPPA = IN_SPON_K//0.11//learn30.29//0.14//0.29//0.29//0.19//14//0.1
			spon_tmp.THETA = IN_SPON_T//0.25//0.2//0.3
		    }
		    nc = new NetCon(spon_tmp,pc.gid2cell(i).synlist.object(1),0,0.1,0.02)
		    sponFire.append(spon_tmp)
		    nclist_spon.append(nc)
		}
	    }
	}
    }
}
